{"/home/travis/build/npmtest/node-npmtest-liquid-node/test.js":"/* istanbul instrument in package npmtest_liquid_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-liquid-node/lib.npmtest_liquid_node.js":"/* istanbul instrument in package npmtest_liquid_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_liquid_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_liquid_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-liquid-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-liquid-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_liquid_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_liquid_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_liquid_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_liquid_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_liquid_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_liquid_node.__dirname + '/lib.npmtest_liquid_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/index.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid, customError, util;\n\n  Liquid = require(\"./liquid\");\n\n  util = require(\"util\");\n\n  customError = function(name, inherit) {\n    var error;\n    if (inherit == null) {\n      inherit = global.Error;\n    }\n    error = function(message) {\n      this.name = name;\n      this.message = message;\n      if (global.Error.captureStackTrace) {\n        return global.Error.captureStackTrace(this, arguments.callee);\n      }\n    };\n    util.inherits(error, inherit);\n    return error;\n  };\n\n  Liquid.Error = customError(\"Error\");\n\n  [\"ArgumentError\", \"ContextError\", \"FilterNotFound\", \"FileSystemError\", \"StandardError\", \"StackLevelError\", \"SyntaxError\"].forEach(function(className) {\n    return Liquid[className] = customError(\"Liquid.\" + className, Liquid.Error);\n  });\n\n  Liquid.Engine = require(\"./liquid/engine\");\n\n  Liquid.Helpers = require(\"./liquid/helpers\");\n\n  Liquid.Range = require(\"./liquid/range\");\n\n  Liquid.Iterable = require(\"./liquid/iterable\");\n\n  Liquid.Drop = require(\"./liquid/drop\");\n\n  Liquid.Context = require(\"./liquid/context\");\n\n  Liquid.Tag = require(\"./liquid/tag\");\n\n  Liquid.Block = require(\"./liquid/block\");\n\n  Liquid.Document = require(\"./liquid/document\");\n\n  Liquid.Variable = require(\"./liquid/variable\");\n\n  Liquid.Template = require(\"./liquid/template\");\n\n  Liquid.StandardFilters = require(\"./liquid/standard_filters\");\n\n  Liquid.Condition = require(\"./liquid/condition\");\n\n  Liquid.ElseCondition = require(\"./liquid/else_condition\");\n\n  Liquid.BlankFileSystem = require(\"./liquid/blank_file_system\");\n\n  Liquid.LocalFileSystem = require(\"./liquid/local_file_system\");\n\n  Liquid.Assign = require(\"./liquid/tags/assign\");\n\n  Liquid.Capture = require(\"./liquid/tags/capture\");\n\n  Liquid.Case = require(\"./liquid/tags/case\");\n\n  Liquid.Comment = require(\"./liquid/tags/comment\");\n\n  Liquid.Decrement = require(\"./liquid/tags/decrement\");\n\n  Liquid.For = require(\"./liquid/tags/for\");\n\n  Liquid.If = require(\"./liquid/tags/if\");\n\n  Liquid.Ifchanged = require(\"./liquid/tags/ifchanged\");\n\n  Liquid.Increment = require(\"./liquid/tags/increment\");\n\n  Liquid.Raw = require(\"./liquid/tags/raw\");\n\n  Liquid.Unless = require(\"./liquid/tags/unless\");\n\n  Liquid.Include = require(\"./liquid/tags/include\");\n\n  module.exports = Liquid;\n\n}).call(this);\n\n//# sourceMappingURL=index.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid;\n\n  module.exports = Liquid = (function() {\n    function Liquid() {}\n\n    Liquid.FilterSeparator = /\\|/;\n\n    Liquid.ArgumentSeparator = /,/;\n\n    Liquid.FilterArgumentSeparator = /\\:/;\n\n    Liquid.VariableAttributeSeparator = /\\./;\n\n    Liquid.TagStart = /\\{\\%/;\n\n    Liquid.TagEnd = /\\%\\}/;\n\n    Liquid.VariableSignature = /\\(?[\\w\\-\\.\\[\\]]\\)?/;\n\n    Liquid.VariableSegment = /[\\w\\-]/;\n\n    Liquid.VariableStart = /\\{\\{/;\n\n    Liquid.VariableEnd = /\\}\\}/;\n\n    Liquid.VariableIncompleteEnd = /\\}\\}?/;\n\n    Liquid.QuotedString = /\"[^\"]*\"|'[^']*'/;\n\n    Liquid.QuotedFragment = RegExp(Liquid.QuotedString.source + \"|(?:[^\\\\s,\\\\|'\\\"]|\" + Liquid.QuotedString.source + \")+\");\n\n    Liquid.StrictQuotedFragment = /\"[^\"]+\"|'[^']+'|[^\\s|:,]+/;\n\n    Liquid.FirstFilterArgument = RegExp(Liquid.FilterArgumentSeparator.source + \"(?:\" + Liquid.StrictQuotedFragment.source + \")\");\n\n    Liquid.OtherFilterArgument = RegExp(Liquid.ArgumentSeparator.source + \"(?:\" + Liquid.StrictQuotedFragment.source + \")\");\n\n    Liquid.SpacelessFilter = RegExp(\"^(?:'[^']+'|\\\"[^\\\"]+\\\"|[^'\\\"])*\" + Liquid.FilterSeparator.source + \"(?:\" + Liquid.StrictQuotedFragment.source + \")(?:\" + Liquid.FirstFilterArgument.source + \"(?:\" + Liquid.OtherFilterArgument.source + \")*)?\");\n\n    Liquid.Expression = RegExp(\"(?:\" + Liquid.QuotedFragment.source + \"(?:\" + Liquid.SpacelessFilter.source + \")*)\");\n\n    Liquid.TagAttributes = RegExp(\"(\\\\w+)\\\\s*\\\\:\\\\s*(\" + Liquid.QuotedFragment.source + \")\");\n\n    Liquid.AnyStartingTag = /\\{\\{|\\{\\%/;\n\n    Liquid.PartialTemplateParser = RegExp(Liquid.TagStart.source + \".*?\" + Liquid.TagEnd.source + \"|\" + Liquid.VariableStart.source + \".*?\" + Liquid.VariableIncompleteEnd.source);\n\n    Liquid.TemplateParser = RegExp(\"(\" + Liquid.PartialTemplateParser.source + \"|\" + Liquid.AnyStartingTag.source + \")\");\n\n    Liquid.VariableParser = RegExp(\"\\\\[[^\\\\]]+\\\\]|\" + Liquid.VariableSegment.source + \"+\\\\??\");\n\n    return Liquid;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=liquid.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/engine.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid,\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  Liquid = require(\"../liquid\");\n\n  module.exports = Liquid.Engine = (function() {\n    function Engine() {\n      var isBlockOrTagBaseClass, isSubclassOf, tag, tagName;\n      this.tags = {};\n      this.Strainer = function(context) {\n        this.context = context;\n      };\n      this.registerFilters(Liquid.StandardFilters);\n      this.fileSystem = new Liquid.BlankFileSystem;\n      isSubclassOf = function(klass, ofKlass) {\n        var ref;\n        if (typeof klass !== 'function') {\n          return false;\n        } else if (klass === ofKlass) {\n          return true;\n        } else {\n          return isSubclassOf((ref = klass.__super__) != null ? ref.constructor : void 0, ofKlass);\n        }\n      };\n      for (tagName in Liquid) {\n        if (!hasProp.call(Liquid, tagName)) continue;\n        tag = Liquid[tagName];\n        if (!isSubclassOf(tag, Liquid.Tag)) {\n          continue;\n        }\n        isBlockOrTagBaseClass = [Liquid.Tag, Liquid.Block].indexOf(tag.constructor) >= 0;\n        if (!isBlockOrTagBaseClass) {\n          this.registerTag(tagName.toLowerCase(), tag);\n        }\n      }\n    }\n\n    Engine.prototype.registerTag = function(name, tag) {\n      return this.tags[name] = tag;\n    };\n\n    Engine.prototype.registerFilters = function() {\n      var filters;\n      filters = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return filters.forEach((function(_this) {\n        return function(filter) {\n          var k, results, v;\n          results = [];\n          for (k in filter) {\n            if (!hasProp.call(filter, k)) continue;\n            v = filter[k];\n            if (v instanceof Function) {\n              results.push(_this.Strainer.prototype[k] = v);\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        };\n      })(this));\n    };\n\n    Engine.prototype.parse = function(source) {\n      var template;\n      template = new Liquid.Template;\n      return template.parse(this, source);\n    };\n\n    Engine.prototype.parseAndRender = function() {\n      var args, source;\n      source = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      return this.parse(source).then(function(template) {\n        return template.render.apply(template, args);\n      });\n    };\n\n    Engine.prototype.registerFileSystem = function(fileSystem) {\n      if (!(fileSystem instanceof Liquid.BlankFileSystem)) {\n        throw Liquid.ArgumentError(\"Must be subclass of Liquid.BlankFileSystem\");\n      }\n      return this.fileSystem = fileSystem;\n    };\n\n    return Engine;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=engine.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/helpers.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  module.exports = {\n    flatten: function(array) {\n      var _flatten, output;\n      output = [];\n      _flatten = function(array) {\n        return array.forEach(function(item) {\n          if (Array.isArray(item)) {\n            return _flatten(item);\n          } else {\n            return output.push(item);\n          }\n        });\n      };\n      _flatten(array);\n      return output;\n    },\n    toFlatString: function(array) {\n      return this.flatten(array).join(\"\");\n    },\n    scan: function(string, regexp, globalMatch) {\n      var _scan, result;\n      if (globalMatch == null) {\n        globalMatch = false;\n      }\n      result = [];\n      _scan = function(s) {\n        var l, match;\n        match = regexp.exec(s);\n        if (match) {\n          if (match.length === 1) {\n            result.push(match[0]);\n          } else {\n            result.push(match.slice(1));\n          }\n          l = match[0].length;\n          if (globalMatch) {\n            l = 1;\n          }\n          if (match.index + l < s.length) {\n            return _scan(s.substring(match.index + l));\n          }\n        }\n      };\n      _scan(string);\n      return result;\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=helpers.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/range.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Range;\n\n  module.exports = Range = (function() {\n    function Range(start, end1, step1) {\n      this.start = start;\n      this.end = end1;\n      this.step = step1 != null ? step1 : 0;\n      if (this.step === 0) {\n        if (this.end < this.start) {\n          this.step = -1;\n        } else {\n          this.step = 1;\n        }\n      }\n      Object.seal(this);\n    }\n\n    Range.prototype.some = function(f) {\n      var current, end, step;\n      current = this.start;\n      end = this.end;\n      step = this.step;\n      if (step > 0) {\n        while (current < end) {\n          if (f(current)) {\n            return true;\n          }\n          current += step;\n        }\n      } else {\n        while (current > end) {\n          if (f(current)) {\n            return true;\n          }\n          current += step;\n        }\n      }\n      return false;\n    };\n\n    Range.prototype.forEach = function(f) {\n      return this.some(function(e) {\n        f(e);\n        return false;\n      });\n    };\n\n    Range.prototype.toArray = function() {\n      var array;\n      array = [];\n      this.forEach(function(e) {\n        return array.push(e);\n      });\n      return array;\n    };\n\n    return Range;\n\n  })();\n\n  Object.defineProperty(Range.prototype, \"length\", {\n    get: function() {\n      return Math.floor((this.end - this.start) / this.step);\n    }\n  });\n\n}).call(this);\n\n//# sourceMappingURL=range.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/iterable.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Iterable, IterableForArray, Promise, Range, isString,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Range = require(\"./range\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  isString = function(input) {\n    return Object.prototype.toString.call(input) === \"[object String]\";\n  };\n\n  module.exports = Iterable = (function() {\n    function Iterable() {}\n\n    Iterable.prototype.first = function() {\n      return this.slice(0, 1).then(function(a) {\n        return a[0];\n      });\n    };\n\n    Iterable.prototype.map = function() {\n      var args;\n      args = arguments;\n      return this.toArray().then(function(a) {\n        return Promise.all(a.map.apply(a, args));\n      });\n    };\n\n    Iterable.prototype.sort = function() {\n      var args;\n      args = arguments;\n      return this.toArray().then(function(a) {\n        return a.sort.apply(a, args);\n      });\n    };\n\n    Iterable.prototype.toArray = function() {\n      return this.slice(0);\n    };\n\n    Iterable.prototype.slice = function() {\n      throw new Error(this.constructor.name + \".slice() not implemented\");\n    };\n\n    Iterable.prototype.last = function() {\n      throw new Error(this.constructor.name + \".last() not implemented\");\n    };\n\n    Iterable.cast = function(v) {\n      if (v instanceof Iterable) {\n        return v;\n      } else if (v instanceof Range) {\n        return new IterableForArray(v.toArray());\n      } else if (Array.isArray(v) || isString(v)) {\n        return new IterableForArray(v);\n      } else if (v != null) {\n        return new IterableForArray([v]);\n      } else {\n        return new IterableForArray([]);\n      }\n    };\n\n    return Iterable;\n\n  })();\n\n  IterableForArray = (function(superClass) {\n    extend(IterableForArray, superClass);\n\n    function IterableForArray(array) {\n      this.array = array;\n    }\n\n    IterableForArray.prototype.slice = function() {\n      var ref;\n      return Promise.resolve((ref = this.array).slice.apply(ref, arguments));\n    };\n\n    IterableForArray.prototype.last = function() {\n      return Promise.resolve(this.array[this.array.length - 1]);\n    };\n\n    return IterableForArray;\n\n  })(Iterable);\n\n}).call(this);\n\n//# sourceMappingURL=iterable.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/drop.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Drop;\n\n  module.exports = Drop = (function() {\n    function Drop() {}\n\n    Drop.prototype.context = null;\n\n    Drop.prototype.hasKey = function(key) {\n      return true;\n    };\n\n    Drop.prototype.invokeDrop = function(methodOrKey) {\n      var value;\n      if (this.constructor.isInvokable(methodOrKey)) {\n        value = this[methodOrKey];\n        if (typeof value === \"function\") {\n          return value.call(this);\n        } else {\n          return value;\n        }\n      } else {\n        return this.beforeMethod(methodOrKey);\n      }\n    };\n\n    Drop.prototype.beforeMethod = function(method) {};\n\n    Drop.isInvokable = function(method) {\n      if (this.invokableMethods == null) {\n        this.invokableMethods = (function(_this) {\n          return function() {\n            var blacklist, whitelist;\n            blacklist = Object.keys(Drop.prototype);\n            whitelist = [\"toLiquid\"];\n            Object.keys(_this.prototype).forEach(function(k) {\n              if (!(blacklist.indexOf(k) >= 0)) {\n                return whitelist.push(k);\n              }\n            });\n            return whitelist;\n          };\n        })(this)();\n      }\n      return this.invokableMethods.indexOf(method) >= 0;\n    };\n\n    Drop.prototype.get = function(methodOrKey) {\n      return this.invokeDrop(methodOrKey);\n    };\n\n    Drop.prototype.toLiquid = function() {\n      return this;\n    };\n\n    Drop.prototype.toString = function() {\n      return \"[Liquid.Drop \" + this.constructor.name + \"]\";\n    };\n\n    return Drop;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=drop.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/context.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Context, Liquid, Promise,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = Context = (function() {\n    function Context(engine, environments, outerScope, registers, rethrowErrors) {\n      var ref;\n      if (environments == null) {\n        environments = {};\n      }\n      if (outerScope == null) {\n        outerScope = {};\n      }\n      if (registers == null) {\n        registers = {};\n      }\n      if (rethrowErrors == null) {\n        rethrowErrors = false;\n      }\n      this.environments = Liquid.Helpers.flatten([environments]);\n      this.scopes = [outerScope];\n      this.registers = registers;\n      this.errors = [];\n      this.rethrowErrors = rethrowErrors;\n      this.strainer = (ref = engine != null ? new engine.Strainer(this) : void 0) != null ? ref : {};\n      this.squashInstanceAssignsWithEnvironments();\n    }\n\n    Context.prototype.registerFilters = function() {\n      var filter, filters, i, k, len, v;\n      filters = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      for (i = 0, len = filters.length; i < len; i++) {\n        filter = filters[i];\n        for (k in filter) {\n          if (!hasProp.call(filter, k)) continue;\n          v = filter[k];\n          if (v instanceof Function) {\n            this.strainer[k] = v;\n          }\n        }\n      }\n    };\n\n    Context.prototype.handleError = function(e) {\n      this.errors.push(e);\n      if (this.rethrowErrors) {\n        throw e;\n      }\n      if (e instanceof Liquid.SyntaxError) {\n        return \"Liquid syntax error: \" + e.message;\n      } else {\n        return \"Liquid error: \" + e.message;\n      }\n    };\n\n    Context.prototype.invoke = function() {\n      var args, available, method, methodName;\n      methodName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      method = this.strainer[methodName];\n      if (method instanceof Function) {\n        return method.apply(this.strainer, args);\n      } else {\n        available = Object.keys(this.strainer);\n        throw new Liquid.FilterNotFound(\"Unknown filter `\" + methodName + \"`, available: [\" + (available.join(', ')) + \"]\");\n      }\n    };\n\n    Context.prototype.push = function(newScope) {\n      if (newScope == null) {\n        newScope = {};\n      }\n      this.scopes.unshift(newScope);\n      if (this.scopes.length > 100) {\n        throw new Error(\"Nesting too deep\");\n      }\n    };\n\n    Context.prototype.merge = function(newScope) {\n      var k, results, v;\n      if (newScope == null) {\n        newScope = {};\n      }\n      results = [];\n      for (k in newScope) {\n        if (!hasProp.call(newScope, k)) continue;\n        v = newScope[k];\n        results.push(this.scopes[0][k] = v);\n      }\n      return results;\n    };\n\n    Context.prototype.pop = function() {\n      if (this.scopes.length <= 1) {\n        throw new Error(\"ContextError\");\n      }\n      return this.scopes.shift();\n    };\n\n    Context.prototype.lastScope = function() {\n      return this.scopes[this.scopes.length - 1];\n    };\n\n    Context.prototype.stack = function(newScope, f) {\n      var popLater, result;\n      if (newScope == null) {\n        newScope = {};\n      }\n      popLater = false;\n      try {\n        if (arguments.length < 2) {\n          f = newScope;\n          newScope = {};\n        }\n        this.push(newScope);\n        result = f();\n        if ((result != null ? result.nodeify : void 0) != null) {\n          popLater = true;\n          result.nodeify((function(_this) {\n            return function() {\n              return _this.pop();\n            };\n          })(this));\n        }\n        return result;\n      } finally {\n        if (!popLater) {\n          this.pop();\n        }\n      }\n    };\n\n    Context.prototype.clearInstanceAssigns = function() {\n      return this.scopes[0] = {};\n    };\n\n    Context.prototype.set = function(key, value) {\n      return this.scopes[0][key] = value;\n    };\n\n    Context.prototype.get = function(key) {\n      return this.resolve(key);\n    };\n\n    Context.prototype.hasKey = function(key) {\n      return Promise.resolve(this.resolve(key)).then(function(v) {\n        return v != null;\n      });\n    };\n\n    Context.Literals = {\n      'null': null,\n      'nil': null,\n      '': null,\n      'true': true,\n      'false': false\n    };\n\n    Context.prototype.resolve = function(key) {\n      var hi, lo, match;\n      if (Liquid.Context.Literals.hasOwnProperty(key)) {\n        return Liquid.Context.Literals[key];\n      } else if (match = /^'(.*)'$/.exec(key)) {\n        return match[1];\n      } else if (match = /^\"(.*)\"$/.exec(key)) {\n        return match[1];\n      } else if (match = /^(\\d+)$/.exec(key)) {\n        return Number(match[1]);\n      } else if (match = /^\\((\\S+)\\.\\.(\\S+)\\)$/.exec(key)) {\n        lo = this.resolve(match[1]);\n        hi = this.resolve(match[2]);\n        return Promise.all([lo, hi]).then(function(arg) {\n          var hi, lo;\n          lo = arg[0], hi = arg[1];\n          lo = Number(lo);\n          hi = Number(hi);\n          if (isNaN(lo) || isNaN(hi)) {\n            return [];\n          }\n          return new Liquid.Range(lo, hi + 1);\n        });\n      } else if (match = /^(\\d[\\d\\.]+)$/.exec(key)) {\n        return Number(match[1]);\n      } else {\n        return this.variable(key);\n      }\n    };\n\n    Context.prototype.findVariable = function(key) {\n      var variable, variableScope;\n      variableScope = void 0;\n      variable = void 0;\n      this.scopes.some(function(scope) {\n        if (scope.hasOwnProperty(key)) {\n          variableScope = scope;\n          return true;\n        }\n      });\n      if (variableScope == null) {\n        this.environments.some((function(_this) {\n          return function(env) {\n            variable = _this.lookupAndEvaluate(env, key);\n            if (variable != null) {\n              return variableScope = env;\n            }\n          };\n        })(this));\n      }\n      if (variableScope == null) {\n        if (this.environments.length > 0) {\n          variableScope = this.environments[this.environments.length - 1];\n        } else if (this.scopes.length > 0) {\n          variableScope = this.scopes[this.scopes.length - 1];\n        } else {\n          throw new Error(\"No scopes to find variable in.\");\n        }\n      }\n      if (variable == null) {\n        variable = this.lookupAndEvaluate(variableScope, key);\n      }\n      return Promise.resolve(variable).then((function(_this) {\n        return function(v) {\n          return _this.liquify(v);\n        };\n      })(this));\n    };\n\n    Context.prototype.variable = function(markup) {\n      return Promise.resolve().then((function(_this) {\n        return function() {\n          var firstPart, iterator, mapper, match, object, parts, squareBracketed;\n          parts = Liquid.Helpers.scan(markup, Liquid.VariableParser);\n          squareBracketed = /^\\[(.*)\\]$/;\n          firstPart = parts.shift();\n          if (match = squareBracketed.exec(firstPart)) {\n            firstPart = match[1];\n          }\n          object = _this.findVariable(firstPart);\n          if (parts.length === 0) {\n            return object;\n          }\n          mapper = function(part, object) {\n            if (object == null) {\n              return Promise.resolve(object);\n            }\n            return Promise.resolve(object).then(_this.liquify.bind(_this)).then(function(object) {\n              var bracketMatch;\n              if (object == null) {\n                return object;\n              }\n              bracketMatch = squareBracketed.exec(part);\n              if (bracketMatch) {\n                part = _this.resolve(bracketMatch[1]);\n              }\n              return Promise.resolve(part).then(function(part) {\n                var isArrayAccess, isObjectAccess, isSpecialAccess;\n                isArrayAccess = Array.isArray(object) && isFinite(part);\n                isObjectAccess = object instanceof Object && ((typeof object.hasKey === \"function\" ? object.hasKey(part) : void 0) || part in object);\n                isSpecialAccess = !bracketMatch && object && (Array.isArray(object) || Object.prototype.toString.call(object) === \"[object String]\") && [\"size\", \"first\", \"last\"].indexOf(part) >= 0;\n                if (isArrayAccess || isObjectAccess) {\n                  return Promise.resolve(_this.lookupAndEvaluate(object, part)).then(_this.liquify.bind(_this));\n                } else if (isSpecialAccess) {\n                  switch (part) {\n                    case \"size\":\n                      return _this.liquify(object.length);\n                    case \"first\":\n                      return _this.liquify(object[0]);\n                    case \"last\":\n                      return _this.liquify(object[object.length - 1]);\n                    default:\n\n                      /* @covignore */\n                      throw new Error(\"Unknown special accessor: \" + part);\n                  }\n                }\n              });\n            });\n          };\n          iterator = function(object, index) {\n            if (index < parts.length) {\n              return mapper(parts[index], object).then(function(object) {\n                return iterator(object, index + 1);\n              });\n            } else {\n              return Promise.resolve(object);\n            }\n          };\n          return iterator(object, 0)[\"catch\"](function(err) {\n            throw new Error(\"Couldn't walk variable: \" + markup + \": \" + err);\n          });\n        };\n      })(this));\n    };\n\n    Context.prototype.lookupAndEvaluate = function(obj, key) {\n      if (obj instanceof Liquid.Drop) {\n        return obj.get(key);\n      } else {\n        return obj != null ? obj[key] : void 0;\n      }\n    };\n\n    Context.prototype.squashInstanceAssignsWithEnvironments = function() {\n      var lastScope;\n      lastScope = this.lastScope();\n      return Object.keys(lastScope).forEach((function(_this) {\n        return function(key) {\n          return _this.environments.some(function(env) {\n            if (env.hasOwnProperty(key)) {\n              lastScope[key] = _this.lookupAndEvaluate(env, key);\n              return true;\n            }\n          });\n        };\n      })(this));\n    };\n\n    Context.prototype.liquify = function(object) {\n      return Promise.resolve(object).then((function(_this) {\n        return function(object) {\n          if (object == null) {\n            return object;\n          } else if (typeof object.toLiquid === \"function\") {\n            object = object.toLiquid();\n          } else if (typeof object === \"object\") {\n            true;\n          } else if (typeof object === \"function\") {\n            object = \"\";\n          } else {\n            Object.prototype.toString.call(object);\n          }\n          if (object instanceof Liquid.Drop) {\n            object.context = _this;\n          }\n          return object;\n        };\n      })(this));\n    };\n\n    return Context;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=context.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tag.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Promise, Tag,\n    slice = [].slice;\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = Tag = (function() {\n    function Tag(template, tagName, markup) {\n      this.template = template;\n      this.tagName = tagName;\n      this.markup = markup;\n    }\n\n    Tag.prototype.parseWithCallbacks = function() {\n      var args, parse;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (this.afterParse) {\n        parse = (function(_this) {\n          return function() {\n            return _this.parse.apply(_this, args).then(function() {\n              return _this.afterParse.apply(_this, args);\n            });\n          };\n        })(this);\n      } else {\n        parse = (function(_this) {\n          return function() {\n            return _this.parse.apply(_this, args);\n          };\n        })(this);\n      }\n      if (this.beforeParse) {\n        return Promise.resolve(this.beforeParse.apply(this, args)).then(parse);\n      } else {\n        return parse();\n      }\n    };\n\n    Tag.prototype.parse = function() {};\n\n    Tag.prototype.name = function() {\n      return this.constructor.name.toLowerCase();\n    };\n\n    Tag.prototype.render = function() {\n      return \"\";\n    };\n\n    return Tag;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=tag.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/block.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Block, Liquid, Promise, Promise_each, util,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../liquid\");\n\n  util = require(\"util\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  Promise_each = function(promises, cb) {\n    var iterator;\n    iterator = function(index) {\n      var promise;\n      if (index >= promises.length) {\n        return Promise.resolve();\n      }\n      promise = promises[index];\n      return Promise.resolve(promise).then(function(value) {\n        return Promise.resolve(cb(value)).then(function() {\n          return iterator(index + 1);\n        });\n      });\n    };\n    return iterator(0);\n  };\n\n  module.exports = Block = (function(superClass) {\n    extend(Block, superClass);\n\n    function Block() {\n      return Block.__super__.constructor.apply(this, arguments);\n    }\n\n    Block.IsTag = RegExp(\"^\" + Liquid.TagStart.source);\n\n    Block.IsVariable = RegExp(\"^\" + Liquid.VariableStart.source);\n\n    Block.FullToken = RegExp(\"^\" + Liquid.TagStart.source + \"\\\\s*(\\\\w+)\\\\s*(.*)?\" + Liquid.TagEnd.source + \"$\");\n\n    Block.ContentOfVariable = RegExp(\"^\" + Liquid.VariableStart.source + \"(.*)\" + Liquid.VariableEnd.source + \"$\");\n\n    Block.prototype.beforeParse = function() {\n      if (this.nodelist == null) {\n        this.nodelist = [];\n      }\n      return this.nodelist.length = 0;\n    };\n\n    Block.prototype.afterParse = function() {\n      return this.assertMissingDelimitation();\n    };\n\n    Block.prototype.parse = function(tokens) {\n      var token;\n      if (tokens.length === 0 || this.ended) {\n        return Promise.resolve();\n      }\n      token = tokens.shift();\n      return Promise.resolve().then((function(_this) {\n        return function() {\n          return _this.parseToken(token, tokens);\n        };\n      })(this))[\"catch\"](function(e) {\n        e.message = e.message + \"\\n    at \" + token.value + \" (\" + token.filename + \":\" + token.line + \":\" + token.col + \")\";\n        if (e.location == null) {\n          e.location = {\n            col: token.col,\n            line: token.line,\n            filename: token.filename\n          };\n        }\n        throw e;\n      }).then((function(_this) {\n        return function() {\n          return _this.parse(tokens);\n        };\n      })(this));\n    };\n\n    Block.prototype.parseToken = function(token, tokens) {\n      var Tag, match, tag;\n      if (Block.IsTag.test(token.value)) {\n        match = Block.FullToken.exec(token.value);\n        if (!match) {\n          throw new Liquid.SyntaxError(\"Tag '\" + token.value + \"' was not properly terminated with regexp: \" + Liquid.TagEnd.inspect);\n        }\n        if (this.blockDelimiter() === match[1]) {\n          return this.endTag();\n        }\n        Tag = this.template.tags[match[1]];\n        if (!Tag) {\n          return this.unknownTag(match[1], match[2], tokens);\n        }\n        tag = new Tag(this.template, match[1], match[2]);\n        this.nodelist.push(tag);\n        return tag.parseWithCallbacks(tokens);\n      } else if (Block.IsVariable.test(token.value)) {\n        return this.nodelist.push(this.createVariable(token));\n      } else if (token.value.length === 0) {\n\n      } else {\n        return this.nodelist.push(token.value);\n      }\n    };\n\n    Block.prototype.endTag = function() {\n      return this.ended = true;\n    };\n\n    Block.prototype.unknownTag = function(tag, params, tokens) {\n      if (tag === 'else') {\n        throw new Liquid.SyntaxError((this.blockName()) + \" tag does not expect else tag\");\n      } else if (tag === 'end') {\n        throw new Liquid.SyntaxError(\"'end' is not a valid delimiter for \" + (this.blockName()) + \" tags. use \" + (this.blockDelimiter()));\n      } else {\n        throw new Liquid.SyntaxError(\"Unknown tag '\" + tag + \"'\");\n      }\n    };\n\n    Block.prototype.blockDelimiter = function() {\n      return \"end\" + (this.blockName());\n    };\n\n    Block.prototype.blockName = function() {\n      return this.tagName;\n    };\n\n    Block.prototype.createVariable = function(token) {\n      var match, ref;\n      match = (ref = Liquid.Block.ContentOfVariable.exec(token.value)) != null ? ref[1] : void 0;\n      if (match) {\n        return new Liquid.Variable(match);\n      }\n      throw new Liquid.SyntaxError(\"Variable '\" + token.value + \"' was not properly terminated with regexp: \" + Liquid.VariableEnd.inspect);\n    };\n\n    Block.prototype.render = function(context) {\n      return this.renderAll(this.nodelist, context);\n    };\n\n    Block.prototype.assertMissingDelimitation = function() {\n      if (!this.ended) {\n        throw new Liquid.SyntaxError((this.blockName()) + \" tag was never closed\");\n      }\n    };\n\n    Block.prototype.renderAll = function(list, context) {\n      var accumulator;\n      accumulator = [];\n      return Promise_each(list, function(token) {\n        if (typeof (token != null ? token.render : void 0) !== \"function\") {\n          accumulator.push(token);\n          return;\n        }\n        return Promise.resolve().then(function() {\n          return token.render(context);\n        }).then(function(s) {\n          return accumulator.push(s);\n        }, function(e) {\n          return accumulator.push(context.handleError(e));\n        });\n      }).then(function() {\n        return accumulator;\n      });\n    };\n\n    return Block;\n\n  })(Liquid.Tag);\n\n}).call(this);\n\n//# sourceMappingURL=block.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/document.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../liquid\");\n\n  module.exports = Liquid.Document = (function(superClass) {\n    extend(Document, superClass);\n\n    function Document(template) {\n      this.template = template;\n    }\n\n    Document.prototype.blockDelimiter = function() {\n      return [];\n    };\n\n    Document.prototype.assertMissingDelimitation = function() {};\n\n    return Document;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=document.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/variable.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid, Promise, PromiseReduce, Variable,\n    slice = [].slice;\n\n  Liquid = require(\"../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  PromiseReduce = require(\"../promise_reduce\");\n\n  module.exports = Variable = (function() {\n    var FilterArgParser, FilterListFragment, VariableNameFragment;\n\n    Variable.FilterParser = RegExp(\"(?:\" + Liquid.FilterSeparator.source + \"|(?:\\\\s*(?!(?:\" + Liquid.FilterSeparator.source + \"))(?:\" + Liquid.QuotedFragment.source + \"|\\\\S+)\\\\s*)+)\");\n\n    VariableNameFragment = RegExp(\"\\\\s*(\" + Liquid.QuotedFragment.source + \")(.*)\");\n\n    FilterListFragment = RegExp(Liquid.FilterSeparator.source + \"\\\\s*(.*)\");\n\n    FilterArgParser = RegExp(\"(?:\" + Liquid.FilterArgumentSeparator.source + \"|\" + Liquid.ArgumentSeparator.source + \")\\\\s*(\" + Liquid.QuotedFragment.source + \")\");\n\n    function Variable(markup) {\n      var filters, match;\n      this.markup = markup;\n      this.name = null;\n      this.filters = [];\n      match = VariableNameFragment.exec(this.markup);\n      if (!match) {\n        return;\n      }\n      this.name = match[1];\n      match = FilterListFragment.exec(match[2]);\n      if (!match) {\n        return;\n      }\n      filters = Liquid.Helpers.scan(match[1], Liquid.Variable.FilterParser);\n      filters.forEach((function(_this) {\n        return function(filter) {\n          var filterArgs, filterName;\n          match = /\\s*(\\w+)/.exec(filter);\n          if (!match) {\n            return;\n          }\n          filterName = match[1];\n          filterArgs = Liquid.Helpers.scan(filter, FilterArgParser);\n          filterArgs = Liquid.Helpers.flatten(filterArgs);\n          return _this.filters.push([filterName, filterArgs]);\n        };\n      })(this));\n    }\n\n    Variable.prototype.render = function(context) {\n      var filtered, reducer, value;\n      if (this.name == null) {\n        return '';\n      }\n      reducer = (function(_this) {\n        return function(input, filter) {\n          var filterArgs;\n          filterArgs = filter[1].map(function(a) {\n            return context.get(a);\n          });\n          return Promise.all([input].concat(slice.call(filterArgs))).then(function(results) {\n            var e, error;\n            input = results.shift();\n            try {\n              return context.invoke.apply(context, [filter[0], input].concat(slice.call(results)));\n            } catch (error) {\n              e = error;\n              if (!(e instanceof Liquid.FilterNotFound)) {\n                throw e;\n              }\n              throw new Liquid.FilterNotFound(\"Error - filter '\" + filter[0] + \"' in '\" + _this.markup + \"' could not be found.\");\n            }\n          });\n        };\n      })(this);\n      value = Promise.resolve(context.get(this.name));\n      switch (this.filters.length) {\n        case 0:\n          filtered = value;\n          break;\n        case 1:\n          filtered = reducer(value, this.filters[0]);\n          break;\n        default:\n          filtered = PromiseReduce(this.filters, reducer, value);\n      }\n      return filtered.then(function(f) {\n        if (!(f instanceof Liquid.Drop)) {\n          return f;\n        }\n        f.context = context;\n        return f.toString();\n      })[\"catch\"](function(e) {\n        return context.handleError(e);\n      });\n    };\n\n    return Variable;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=variable.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/promise_reduce.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Promise, reduce;\n\n  Promise = require(\"native-or-bluebird\");\n\n  reduce = function(collection, reducer, value) {\n    return Promise.all(collection).then(function(items) {\n      return items.reduce(function(promise, item, index, length) {\n        return promise.then(function(value) {\n          return reducer(value, item, index, length);\n        });\n      }, Promise.resolve(value));\n    });\n  };\n\n  module.exports = reduce;\n\n}).call(this);\n\n//# sourceMappingURL=promise_reduce.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/template.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid, Promise,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = Liquid.Template = (function() {\n    function Template() {\n      this.registers = {};\n      this.assigns = {};\n      this.instanceAssigns = {};\n      this.tags = {};\n      this.errors = [];\n      this.rethrowErrors = true;\n    }\n\n    Template.prototype.parse = function(engine, source) {\n      this.engine = engine;\n      if (source == null) {\n        source = \"\";\n      }\n      return Promise.resolve().then((function(_this) {\n        return function() {\n          var tokens;\n          tokens = _this._tokenize(source);\n          _this.tags = _this.engine.tags;\n          _this.root = new Liquid.Document(_this);\n          return _this.root.parseWithCallbacks(tokens).then(function() {\n            return _this;\n          });\n        };\n      })(this));\n    };\n\n    Template.prototype.render = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return Promise.resolve().then((function(_this) {\n        return function() {\n          return _this._render.apply(_this, args);\n        };\n      })(this));\n    };\n\n    Template.prototype._render = function(assigns, options) {\n      var context, copyErrors, k, ref, v;\n      if (this.root == null) {\n        throw new Error(\"No document root. Did you parse the document yet?\");\n      }\n      context = (function() {\n        if (assigns instanceof Liquid.Context) {\n          return assigns;\n        } else if (assigns instanceof Object) {\n          assigns = [assigns, this.assigns];\n          return new Liquid.Context(this.engine, assigns, this.instanceAssigns, this.registers, this.rethrowErrors);\n        } else if (assigns == null) {\n          return new Liquid.Context(this.engine, this.assigns, this.instanceAssigns, this.registers, this.rethrowErrors);\n        } else {\n          throw new Error(\"Expected Object or Liquid::Context as parameter, but was \" + (typeof assigns) + \".\");\n        }\n      }).call(this);\n      if (options != null ? options.registers : void 0) {\n        ref = options.registers;\n        for (k in ref) {\n          if (!hasProp.call(ref, k)) continue;\n          v = ref[k];\n          this.registers[k] = v;\n        }\n      }\n      if (options != null ? options.filters : void 0) {\n        context.registerFilters.apply(context, options.filters);\n      }\n      copyErrors = (function(_this) {\n        return function(actualResult) {\n          _this.errors = context.errors;\n          return actualResult;\n        };\n      })(this);\n      return this.root.render(context).then(function(chunks) {\n        return Liquid.Helpers.toFlatString(chunks);\n      }).then(function(result) {\n        this.errors = context.errors;\n        return result;\n      }, function(error) {\n        this.errors = context.errors;\n        throw error;\n      });\n    };\n\n    Template.prototype._tokenize = function(source) {\n      var col, line, tokens;\n      source = String(source);\n      if (source.length === 0) {\n        return [];\n      }\n      tokens = source.split(Liquid.TemplateParser);\n      line = 1;\n      col = 1;\n      return tokens.filter(function(token) {\n        return token.length > 0;\n      }).map(function(value) {\n        var lastIndex, linebreaks, result;\n        result = {\n          value: value,\n          col: col,\n          line: line\n        };\n        lastIndex = value.lastIndexOf(\"\\n\");\n        if (lastIndex < 0) {\n          col += value.length;\n        } else {\n          linebreaks = value.split(\"\\n\").length - 1;\n          line += linebreaks;\n          col = value.length - lastIndex;\n        }\n        return result;\n      });\n    };\n\n    return Template;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=template.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/standard_filters.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var HTML_ESCAPE, HTML_ESCAPE_ONCE_REGEXP, HTML_ESCAPE_REGEXP, Iterable, Promise, flatten, has, hasOwnProperty, isArguments, isArray, isBlank, isEmpty, isNumber, isString, strftime, toDate, toIterable, toNumber, toObjectString, toString;\n\n  strftime = require(\"strftime\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  Iterable = require(\"./iterable\");\n\n  flatten = require(\"./helpers\").flatten;\n\n  toNumber = function(input) {\n    return Number(input);\n  };\n\n  toObjectString = Object.prototype.toString;\n\n  hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  isString = function(input) {\n    return toObjectString.call(input) === \"[object String]\";\n  };\n\n  isArray = function(input) {\n    return Array.isArray(input);\n  };\n\n  isArguments = function(input) {\n    return toObjectString(input) === \"[object Arguments]\";\n  };\n\n  isNumber = function(input) {\n    return !isArray(input) && (input - parseFloat(input)) >= 0;\n  };\n\n  toString = function(input) {\n    if (input == null) {\n      return \"\";\n    } else if (isString(input)) {\n      return input;\n    } else if (typeof input.toString === \"function\") {\n      return toString(input.toString());\n    } else {\n      return toObjectString.call(input);\n    }\n  };\n\n  toIterable = function(input) {\n    return Iterable.cast(input);\n  };\n\n  toDate = function(input) {\n    if (input == null) {\n      return;\n    }\n    if (input instanceof Date) {\n      return input;\n    }\n    if (input === 'now') {\n      return new Date();\n    }\n    if (isNumber(input)) {\n      input = parseInt(input);\n    } else {\n      input = toString(input);\n      if (input.length === 0) {\n        return;\n      }\n      input = Date.parse(input);\n    }\n    if (input != null) {\n      return new Date(input);\n    }\n  };\n\n  has = function(input, key) {\n    return (input != null) && hasOwnProperty.call(input, key);\n  };\n\n  isEmpty = function(input) {\n    var key;\n    if (input == null) {\n      return true;\n    }\n    if (isArray(input) || isString(input) || isArguments(input)) {\n      return input.length === 0;\n    }\n    for (key in input) {\n      if (has(key, input)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  isBlank = function(input) {\n    return !(isNumber(input) || input === true) && isEmpty(input);\n  };\n\n  HTML_ESCAPE = function(chr) {\n    switch (chr) {\n      case \"&\":\n        return '&amp;';\n      case \">\":\n        return '&gt;';\n      case \"<\":\n        return '&lt;';\n      case '\"':\n        return '&quot;';\n      case \"'\":\n        return '&#39;';\n    }\n  };\n\n  HTML_ESCAPE_ONCE_REGEXP = /[\"><']|&(?!([a-zA-Z]+|(#\\d+));)/g;\n\n  HTML_ESCAPE_REGEXP = /([&><\"'])/g;\n\n  module.exports = {\n    size: function(input) {\n      var ref;\n      return (ref = input != null ? input.length : void 0) != null ? ref : 0;\n    },\n    downcase: function(input) {\n      return toString(input).toLowerCase();\n    },\n    upcase: function(input) {\n      return toString(input).toUpperCase();\n    },\n    append: function(input, suffix) {\n      return toString(input) + toString(suffix);\n    },\n    prepend: function(input, prefix) {\n      return toString(prefix) + toString(input);\n    },\n    empty: function(input) {\n      return isEmpty(input);\n    },\n    capitalize: function(input) {\n      return toString(input).replace(/^([a-z])/, function(m, chr) {\n        return chr.toUpperCase();\n      });\n    },\n    sort: function(input, property) {\n      if (property == null) {\n        return toIterable(input).sort();\n      }\n      return toIterable(input).map(function(item) {\n        return Promise.resolve(item != null ? item[property] : void 0).then(function(key) {\n          return {\n            key: key,\n            item: item\n          };\n        });\n      }).then(function(array) {\n        return array.sort(function(a, b) {\n          var ref, ref1;\n          return (ref = a.key > b.key) != null ? ref : {\n            1: (ref1 = a.key === b.key) != null ? ref1 : {\n              0: -1\n            }\n          };\n        }).map(function(a) {\n          return a.item;\n        });\n      });\n    },\n    map: function(input, property) {\n      if (property == null) {\n        return input;\n      }\n      return toIterable(input).map(function(e) {\n        return e != null ? e[property] : void 0;\n      });\n    },\n    escape: function(input) {\n      return toString(input).replace(HTML_ESCAPE_REGEXP, HTML_ESCAPE);\n    },\n    escape_once: function(input) {\n      return toString(input).replace(HTML_ESCAPE_ONCE_REGEXP, HTML_ESCAPE);\n    },\n    strip_html: function(input) {\n      return toString(input).replace(/<script[\\s\\S]*?<\\/script>/g, \"\").replace(/<!--[\\s\\S]*?-->/g, \"\").replace(/<style[\\s\\S]*?<\\/style>/g, \"\").replace(/<[^>]*?>/g, \"\");\n    },\n    strip_newlines: function(input) {\n      return toString(input).replace(/\\r?\\n/g, \"\");\n    },\n    newline_to_br: function(input) {\n      return toString(input).replace(/\\n/g, \"<br />\\n\");\n    },\n    replace: function(input, string, replacement) {\n      if (replacement == null) {\n        replacement = \"\";\n      }\n      return toString(input).replace(new RegExp(string, 'g'), replacement);\n    },\n    replace_first: function(input, string, replacement) {\n      if (replacement == null) {\n        replacement = \"\";\n      }\n      return toString(input).replace(string, replacement);\n    },\n    remove: function(input, string) {\n      return this.replace(input, string);\n    },\n    remove_first: function(input, string) {\n      return this.replace_first(input, string);\n    },\n    truncate: function(input, length, truncateString) {\n      var l;\n      if (length == null) {\n        length = 50;\n      }\n      if (truncateString == null) {\n        truncateString = '...';\n      }\n      input = toString(input);\n      truncateString = toString(truncateString);\n      length = toNumber(length);\n      l = length - truncateString.length;\n      if (l < 0) {\n        l = 0;\n      }\n      if (input.length > length) {\n        return input.slice(0, l) + truncateString;\n      } else {\n        return input;\n      }\n    },\n    truncatewords: function(input, words, truncateString) {\n      var wordlist;\n      if (words == null) {\n        words = 15;\n      }\n      if (truncateString == null) {\n        truncateString = '...';\n      }\n      input = toString(input);\n      wordlist = input.split(\" \");\n      words = Math.max(1, toNumber(words));\n      if (wordlist.length > words) {\n        return wordlist.slice(0, words).join(\" \") + truncateString;\n      } else {\n        return input;\n      }\n    },\n    split: function(input, pattern) {\n      input = toString(input);\n      if (!input) {\n        return;\n      }\n      return input.split(pattern);\n    },\n    flatten: function(input) {\n      return toIterable(input).toArray().then(function(a) {\n        return flatten(a);\n      });\n    },\n    join: function(input, glue) {\n      if (glue == null) {\n        glue = ' ';\n      }\n      return this.flatten(input).then(function(a) {\n        return a.join(glue);\n      });\n    },\n    first: function(input) {\n      return toIterable(input).first();\n    },\n    last: function(input) {\n      return toIterable(input).last();\n    },\n    plus: function(input, operand) {\n      return toNumber(input) + toNumber(operand);\n    },\n    minus: function(input, operand) {\n      return toNumber(input) - toNumber(operand);\n    },\n    times: function(input, operand) {\n      return toNumber(input) * toNumber(operand);\n    },\n    dividedBy: function(input, operand) {\n      return toNumber(input) / toNumber(operand);\n    },\n    divided_by: function(input, operand) {\n      return this.dividedBy(input, operand);\n    },\n    round: function(input, operand) {\n      return toNumber(input).toFixed(operand);\n    },\n    modulo: function(input, operand) {\n      return toNumber(input) % toNumber(operand);\n    },\n    date: function(input, format) {\n      input = toDate(input);\n      if (input == null) {\n        return \"\";\n      } else if (toString(format).length === 0) {\n        return input.toUTCString();\n      } else {\n        return strftime(format, input);\n      }\n    },\n    \"default\": function(input, defaultValue) {\n      var blank, ref;\n      if (arguments.length < 2) {\n        defaultValue = '';\n      }\n      blank = (ref = input != null ? typeof input.isBlank === \"function\" ? input.isBlank() : void 0 : void 0) != null ? ref : isBlank(input);\n      if (blank) {\n        return defaultValue;\n      } else {\n        return input;\n      }\n    }\n  };\n\n}).call(this);\n\n//# sourceMappingURL=standard_filters.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/condition.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Condition, Liquid, Promise;\n\n  Liquid = require(\"../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = Condition = (function() {\n    var LITERALS;\n\n    Condition.operators = {\n      '==': function(cond, left, right) {\n        return cond.equalVariables(left, right);\n      },\n      'is': function(cond, left, right) {\n        return cond.equalVariables(left, right);\n      },\n      '!=': function(cond, left, right) {\n        return !cond.equalVariables(left, right);\n      },\n      '<>': function(cond, left, right) {\n        return !cond.equalVariables(left, right);\n      },\n      'isnt': function(cond, left, right) {\n        return !cond.equalVariables(left, right);\n      },\n      '<': function(cond, left, right) {\n        return left < right;\n      },\n      '>': function(cond, left, right) {\n        return left > right;\n      },\n      '<=': function(cond, left, right) {\n        return left <= right;\n      },\n      '>=': function(cond, left, right) {\n        return left >= right;\n      },\n      'contains': function(cond, left, right) {\n        return (left != null ? typeof left.indexOf === \"function\" ? left.indexOf(right) : void 0 : void 0) >= 0;\n      }\n    };\n\n    function Condition(left1, operator, right1) {\n      this.left = left1;\n      this.operator = operator;\n      this.right = right1;\n      this.childRelation = null;\n      this.childCondition = null;\n    }\n\n    Condition.prototype.evaluate = function(context) {\n      var result;\n      if (context == null) {\n        context = new Liquid.Context();\n      }\n      result = this.interpretCondition(this.left, this.right, this.operator, context);\n      switch (this.childRelation) {\n        case \"or\":\n          return Promise.resolve(result).then((function(_this) {\n            return function(result) {\n              return result || _this.childCondition.evaluate(context);\n            };\n          })(this));\n        case \"and\":\n          return Promise.resolve(result).then((function(_this) {\n            return function(result) {\n              return result && _this.childCondition.evaluate(context);\n            };\n          })(this));\n        default:\n          return result;\n      }\n    };\n\n    Condition.prototype.or = function(childCondition) {\n      this.childCondition = childCondition;\n      return this.childRelation = \"or\";\n    };\n\n    Condition.prototype.and = function(childCondition) {\n      this.childCondition = childCondition;\n      return this.childRelation = \"and\";\n    };\n\n    Condition.prototype.attach = function(attachment) {\n      return this.attachment = attachment;\n    };\n\n    Condition.prototype.equalVariables = function(left, right) {\n      if (typeof left === \"function\") {\n        return left(right);\n      } else if (typeof right === \"function\") {\n        return right(left);\n      } else {\n        return left === right;\n      }\n    };\n\n    LITERALS = {\n      empty: function(v) {\n        return !((v != null ? v.length : void 0) > 0);\n      },\n      blank: function(v) {\n        return !v || v.toString().length === 0;\n      }\n    };\n\n    Condition.prototype.resolveVariable = function(v, context) {\n      if (v in LITERALS) {\n        return Promise.resolve(LITERALS[v]);\n      } else {\n        return context.get(v);\n      }\n    };\n\n    Condition.prototype.interpretCondition = function(left, right, op, context) {\n      var operation;\n      if (op == null) {\n        return this.resolveVariable(left, context);\n      }\n      operation = Condition.operators[op];\n      if (operation == null) {\n        throw new Error(\"Unknown operator \" + op);\n      }\n      left = this.resolveVariable(left, context);\n      right = this.resolveVariable(right, context);\n      return Promise.all([left, right]).then((function(_this) {\n        return function(arg) {\n          var left, right;\n          left = arg[0], right = arg[1];\n          return operation(_this, left, right);\n        };\n      })(this));\n    };\n\n    return Condition;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=condition.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/else_condition.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var ElseCondition, Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../liquid\");\n\n  module.exports = ElseCondition = (function(superClass) {\n    extend(ElseCondition, superClass);\n\n    function ElseCondition() {\n      return ElseCondition.__super__.constructor.apply(this, arguments);\n    }\n\n    ElseCondition.prototype.evaluate = function() {\n      return true;\n    };\n\n    return ElseCondition;\n\n  })(Liquid.Condition);\n\n}).call(this);\n\n//# sourceMappingURL=else_condition.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/blank_file_system.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid, Promise;\n\n  Liquid = require(\"../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = Liquid.BlankFileSystem = (function() {\n    function BlankFileSystem() {}\n\n    BlankFileSystem.prototype.readTemplateFile = function(templatePath) {\n      return Promise.reject(new Liquid.FileSystemError(\"This file system doesn't allow includes\"));\n    };\n\n    return BlankFileSystem;\n\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=blank_file_system.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/local_file_system.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Fs, Liquid, Path, Promise, readFile,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  Fs = require(\"fs\");\n\n  Path = require(\"path\");\n\n  readFile = function(fpath, encoding) {\n    return new Promise(function(resolve, reject) {\n      return Fs.readFile(fpath, encoding, function(err, content) {\n        if (err) {\n          return reject(err);\n        } else {\n          return resolve(content);\n        }\n      });\n    });\n  };\n\n  module.exports = Liquid.LocalFileSystem = (function(superClass) {\n    var PathPattern;\n\n    extend(LocalFileSystem, superClass);\n\n    PathPattern = /^[^.\\/][a-zA-Z0-9-_\\/]+$/;\n\n    function LocalFileSystem(root, extension) {\n      if (extension == null) {\n        extension = \"html\";\n      }\n      this.root = root;\n      this.fileExtension = extension;\n    }\n\n    LocalFileSystem.prototype.readTemplateFile = function(templatePath) {\n      return this.fullPath(templatePath).then(function(fullPath) {\n        return readFile(fullPath, 'utf8')[\"catch\"](function(err) {\n          throw new Liquid.FileSystemError(\"Error loading template: \" + err.message);\n        });\n      });\n    };\n\n    LocalFileSystem.prototype.fullPath = function(templatePath) {\n      if (PathPattern.test(templatePath)) {\n        return Promise.resolve(Path.resolve(Path.join(this.root, templatePath + (\".\" + this.fileExtension))));\n      } else {\n        return Promise.reject(new Liquid.ArgumentError(\"Illegal template name '\" + templatePath + \"'\"));\n      }\n    };\n\n    return LocalFileSystem;\n\n  })(Liquid.BlankFileSystem);\n\n}).call(this);\n\n//# sourceMappingURL=local_file_system.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/assign.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Assign, Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  module.exports = Assign = (function(superClass) {\n    var Syntax, SyntaxHelp;\n\n    extend(Assign, superClass);\n\n    SyntaxHelp = \"Syntax Error in 'assign' - Valid syntax: assign [var] = [source]\";\n\n    Syntax = RegExp(\"((?:\" + Liquid.VariableSignature.source + \")+)\\\\s*=\\\\s*(.*)\\\\s*\");\n\n    function Assign(template, tagName, markup) {\n      var match;\n      if (match = Syntax.exec(markup)) {\n        this.to = match[1];\n        this.from = new Liquid.Variable(match[2]);\n      } else {\n        throw new Liquid.SyntaxError(SyntaxHelp);\n      }\n      Assign.__super__.constructor.apply(this, arguments);\n    }\n\n    Assign.prototype.render = function(context) {\n      context.lastScope()[this.to] = this.from.render(context);\n      return Assign.__super__.render.call(this, context);\n    };\n\n    return Assign;\n\n  })(Liquid.Tag);\n\n}).call(this);\n\n//# sourceMappingURL=assign.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/capture.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Capture, Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  module.exports = Capture = (function(superClass) {\n    var Syntax, SyntaxHelp;\n\n    extend(Capture, superClass);\n\n    Syntax = /(\\w+)/;\n\n    SyntaxHelp = \"Syntax Error in 'capture' - Valid syntax: capture [var]\";\n\n    function Capture(template, tagName, markup) {\n      var match;\n      match = Syntax.exec(markup);\n      if (match) {\n        this.to = match[1];\n      } else {\n        throw new Liquid.SyntaxError(SyntaxHelp);\n      }\n      Capture.__super__.constructor.apply(this, arguments);\n    }\n\n    Capture.prototype.render = function(context) {\n      return Capture.__super__.render.apply(this, arguments).then((function(_this) {\n        return function(chunks) {\n          var output;\n          output = Liquid.Helpers.toFlatString(chunks);\n          context.lastScope()[_this.to] = output;\n          return \"\";\n        };\n      })(this));\n    };\n\n    return Capture;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=capture.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/case.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Case, Liquid, Promise, PromiseReduce,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  PromiseReduce = require(\"../../promise_reduce\");\n\n  module.exports = Case = (function(superClass) {\n    var Syntax, SyntaxHelp, WhenSyntax;\n\n    extend(Case, superClass);\n\n    SyntaxHelp = \"Syntax Error in tag 'case' - Valid syntax: case [expression]\";\n\n    Syntax = RegExp(\"(\" + Liquid.QuotedFragment.source + \")\");\n\n    WhenSyntax = RegExp(\"(\" + Liquid.QuotedFragment.source + \")(?:(?:\\\\s+or\\\\s+|\\\\s*\\\\,\\\\s*)(\" + Liquid.QuotedFragment.source + \"))?\");\n\n    function Case(template, tagName, markup) {\n      var match;\n      this.blocks = [];\n      match = Syntax.exec(markup);\n      if (!match) {\n        throw new Liquid.SyntaxError(SyntaxHelp);\n      }\n      this.markup = markup;\n      Case.__super__.constructor.apply(this, arguments);\n    }\n\n    Case.prototype.unknownTag = function(tag, markup) {\n      if (tag === \"when\" || tag === \"else\") {\n        return this.pushBlock(tag, markup);\n      } else {\n        return Case.__super__.unknownTag.apply(this, arguments);\n      }\n    };\n\n    Case.prototype.render = function(context) {\n      return context.stack((function(_this) {\n        return function() {\n          return PromiseReduce(_this.blocks, function(chosenBlock, block) {\n            if (chosenBlock != null) {\n              return chosenBlock;\n            }\n            return Promise.resolve().then(function() {\n              return block.evaluate(context);\n            }).then(function(ok) {\n              if (ok) {\n                return block;\n              }\n            });\n          }, null).then(function(block) {\n            if (block != null) {\n              return _this.renderAll(block.attachment, context);\n            } else {\n              return \"\";\n            }\n          });\n        };\n      })(this));\n    };\n\n    Case.prototype.pushBlock = function(tag, markup) {\n      var block, expressions, i, len, nodelist, ref, results, value;\n      if (tag === \"else\") {\n        block = new Liquid.ElseCondition();\n        this.blocks.push(block);\n        return this.nodelist = block.attach([]);\n      } else {\n        expressions = Liquid.Helpers.scan(markup, WhenSyntax);\n        nodelist = [];\n        ref = expressions[0];\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n          value = ref[i];\n          if (value) {\n            block = new Liquid.Condition(this.markup, '==', value);\n            this.blocks.push(block);\n            results.push(this.nodelist = block.attach(nodelist));\n          } else {\n            results.push(void 0);\n          }\n        }\n        return results;\n      }\n    };\n\n    return Case;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=case.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/comment.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Comment, Raw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Raw = require(\"./raw\");\n\n  module.exports = Comment = (function(superClass) {\n    extend(Comment, superClass);\n\n    function Comment() {\n      return Comment.__super__.constructor.apply(this, arguments);\n    }\n\n    Comment.prototype.render = function() {\n      return \"\";\n    };\n\n    return Comment;\n\n  })(Raw);\n\n}).call(this);\n\n//# sourceMappingURL=comment.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/raw.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid, Promise, Raw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = Raw = (function(superClass) {\n    extend(Raw, superClass);\n\n    function Raw() {\n      return Raw.__super__.constructor.apply(this, arguments);\n    }\n\n    Raw.prototype.parse = function(tokens) {\n      return Promise.resolve().then((function(_this) {\n        return function() {\n          var match, token;\n          if (tokens.length === 0 || _this.ended) {\n            return Promise.resolve();\n          }\n          token = tokens.shift();\n          match = Liquid.Block.FullToken.exec(token.value);\n          if ((match != null ? match[1] : void 0) === _this.blockDelimiter()) {\n            return _this.endTag();\n          }\n          _this.nodelist.push(token.value);\n          return _this.parse(tokens);\n        };\n      })(this));\n    };\n\n    return Raw;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=raw.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/decrement.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Decrement, Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  module.exports = Decrement = (function(superClass) {\n    extend(Decrement, superClass);\n\n    function Decrement(template, tagName, markup) {\n      this.variable = markup.trim();\n      Decrement.__super__.constructor.apply(this, arguments);\n    }\n\n    Decrement.prototype.render = function(context) {\n      var base, name, value;\n      value = (base = context.environments[0])[name = this.variable] || (base[name] = 0);\n      value = value - 1;\n      context.environments[0][this.variable] = value;\n      return value.toString();\n    };\n\n    return Decrement;\n\n  })(Liquid.Tag);\n\n}).call(this);\n\n//# sourceMappingURL=decrement.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/for.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var For, Iterable, Liquid, Promise, PromiseReduce,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  PromiseReduce = require(\"../../promise_reduce\");\n\n  Iterable = require(\"../iterable\");\n\n  module.exports = For = (function(superClass) {\n    var Syntax, SyntaxHelp;\n\n    extend(For, superClass);\n\n    SyntaxHelp = \"Syntax Error in 'for loop' - Valid syntax: for [item] in [collection]\";\n\n    Syntax = RegExp(\"(\\\\w+)\\\\s+in\\\\s+((?:\" + Liquid.QuotedFragment.source + \")+)\\\\s*(reversed)?\");\n\n    function For(template, tagName, markup) {\n      var match;\n      match = Syntax.exec(markup);\n      if (match) {\n        this.variableName = match[1];\n        this.collectionName = match[2];\n        this.registerName = match[1] + \"=\" + match[2];\n        this.reversed = match[3];\n        this.attributes = {};\n        Liquid.Helpers.scan(markup, Liquid.TagAttributes).forEach((function(_this) {\n          return function(attr) {\n            return _this.attributes[attr[0]] = attr[1];\n          };\n        })(this));\n      } else {\n        throw new Liquid.SyntaxError(SyntaxHelp);\n      }\n      this.nodelist = this.forBlock = [];\n      For.__super__.constructor.apply(this, arguments);\n    }\n\n    For.prototype.unknownTag = function(tag, markup) {\n      if (tag !== \"else\") {\n        return For.__super__.unknownTag.apply(this, arguments);\n      }\n      return this.nodelist = this.elseBlock = [];\n    };\n\n    For.prototype.render = function(context) {\n      var base;\n      (base = context.registers)[\"for\"] || (base[\"for\"] = {});\n      return Promise.resolve(context.get(this.collectionName)).then((function(_this) {\n        return function(collection) {\n          var from, k, limit, to, v;\n          if (collection != null ? collection.forEach : void 0) {\n\n          } else if (collection instanceof Object) {\n            collection = (function() {\n              var results;\n              results = [];\n              for (k in collection) {\n                if (!hasProp.call(collection, k)) continue;\n                v = collection[k];\n                results.push([k, v]);\n              }\n              return results;\n            })();\n          } else {\n            return _this.renderElse(context);\n          }\n          from = _this.attributes.offset === \"continue\" ? Number(context.registers[\"for\"][_this.registerName]) || 0 : Number(_this.attributes.offset) || 0;\n          limit = _this.attributes.limit;\n          to = limit ? Number(limit) + from : null;\n          return _this.sliceCollection(collection, from, to).then(function(segment) {\n            var length;\n            if (segment.length === 0) {\n              return _this.renderElse(context);\n            }\n            if (_this.reversed) {\n              segment.reverse();\n            }\n            length = segment.length;\n            context.registers[\"for\"][_this.registerName] = from + segment.length;\n            return context.stack(function() {\n              return PromiseReduce(segment, function(output, item, index) {\n                context.set(_this.variableName, item);\n                context.set(\"forloop\", {\n                  name: _this.registerName,\n                  length: length,\n                  index: index + 1,\n                  index0: index,\n                  rindex: length - index,\n                  rindex0: length - index - 1,\n                  first: index === 0,\n                  last: index === length - 1\n                });\n                return Promise.resolve().then(function() {\n                  return _this.renderAll(_this.forBlock, context);\n                }).then(function(rendered) {\n                  output.push(rendered);\n                  return output;\n                })[\"catch\"](function(e) {\n                  output.push(context.handleError(e));\n                  return output;\n                });\n              }, []);\n            });\n          });\n        };\n      })(this));\n    };\n\n    For.prototype.sliceCollection = function(collection, from, to) {\n      var args, ref;\n      args = [from];\n      if (to != null) {\n        args.push(to);\n      }\n      return (ref = Iterable.cast(collection)).slice.apply(ref, args);\n    };\n\n    For.prototype.renderElse = function(context) {\n      if (this.elseBlock) {\n        return this.renderAll(this.elseBlock, context);\n      } else {\n        return \"\";\n      }\n    };\n\n    return For;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=for.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/if.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var If, Liquid, Promise, PromiseReduce,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  PromiseReduce = require(\"../../promise_reduce\");\n\n  module.exports = If = (function(superClass) {\n    var ExpressionsAndOperators, Syntax, SyntaxHelp;\n\n    extend(If, superClass);\n\n    SyntaxHelp = \"Syntax Error in tag 'if' - Valid syntax: if [expression]\";\n\n    Syntax = RegExp(\"(\" + Liquid.QuotedFragment.source + \")\\\\s*([=!<>a-z_]+)?\\\\s*(\" + Liquid.QuotedFragment.source + \")?\");\n\n    ExpressionsAndOperators = RegExp(\"(?:\\\\b(?:\\\\s?and\\\\s?|\\\\s?or\\\\s?)\\\\b|(?:\\\\s*(?!\\\\b(?:\\\\s?and\\\\s?|\\\\s?or\\\\s?)\\\\b)(?:\" + Liquid.QuotedFragment.source + \"|\\\\S+)\\\\s*)+)\");\n\n    function If(template, tagName, markup) {\n      this.blocks = [];\n      this.pushBlock('if', markup);\n      If.__super__.constructor.apply(this, arguments);\n    }\n\n    If.prototype.unknownTag = function(tag, markup) {\n      if (tag === \"elsif\" || tag === \"else\") {\n        return this.pushBlock(tag, markup);\n      } else {\n        return If.__super__.unknownTag.apply(this, arguments);\n      }\n    };\n\n    If.prototype.render = function(context) {\n      return context.stack((function(_this) {\n        return function() {\n          return PromiseReduce(_this.blocks, function(chosenBlock, block) {\n            if (chosenBlock != null) {\n              return chosenBlock;\n            }\n            return Promise.resolve().then(function() {\n              return block.evaluate(context);\n            }).then(function(ok) {\n              if (block.negate) {\n                ok = !ok;\n              }\n              if (ok) {\n                return block;\n              }\n            });\n          }, null).then(function(block) {\n            if (block != null) {\n              return _this.renderAll(block.attachment, context);\n            } else {\n              return \"\";\n            }\n          });\n        };\n      })(this));\n    };\n\n    If.prototype.pushBlock = function(tag, markup) {\n      var block, condition, expressions, match, newCondition, operator;\n      block = (function() {\n        if (tag === \"else\") {\n          return new Liquid.ElseCondition();\n        } else {\n          expressions = Liquid.Helpers.scan(markup, ExpressionsAndOperators);\n          expressions = expressions.reverse();\n          match = Syntax.exec(expressions.shift());\n          if (!match) {\n            throw new Liquid.SyntaxError(SyntaxHelp);\n          }\n          condition = (function(func, args, ctor) {\n            ctor.prototype = func.prototype;\n            var child = new ctor, result = func.apply(child, args);\n            return Object(result) === result ? result : child;\n          })(Liquid.Condition, match.slice(1, 4), function(){});\n          while (expressions.length > 0) {\n            operator = String(expressions.shift()).trim();\n            match = Syntax.exec(expressions.shift());\n            if (!match) {\n              throw new SyntaxError(SyntaxHelp);\n            }\n            newCondition = (function(func, args, ctor) {\n              ctor.prototype = func.prototype;\n              var child = new ctor, result = func.apply(child, args);\n              return Object(result) === result ? result : child;\n            })(Liquid.Condition, match.slice(1, 4), function(){});\n            newCondition[operator].call(newCondition, condition);\n            condition = newCondition;\n          }\n          return condition;\n        }\n      })();\n      this.blocks.push(block);\n      return this.nodelist = block.attach([]);\n    };\n\n    return If;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=if.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/ifchanged.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var IfChanged, Liquid, Promise,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  Promise = require(\"native-or-bluebird\");\n\n  module.exports = IfChanged = (function(superClass) {\n    extend(IfChanged, superClass);\n\n    function IfChanged() {\n      return IfChanged.__super__.constructor.apply(this, arguments);\n    }\n\n    IfChanged.prototype.render = function(context) {\n      return context.stack((function(_this) {\n        return function() {\n          var rendered;\n          rendered = _this.renderAll(_this.nodelist, context);\n          return Promise.resolve(rendered).then(function(output) {\n            output = Liquid.Helpers.toFlatString(output);\n            if (output !== context.registers.ifchanged) {\n              return context.registers.ifchanged = output;\n            } else {\n              return \"\";\n            }\n          });\n        };\n      })(this));\n    };\n\n    return IfChanged;\n\n  })(Liquid.Block);\n\n}).call(this);\n\n//# sourceMappingURL=ifchanged.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/increment.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Increment, Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  module.exports = Increment = (function(superClass) {\n    extend(Increment, superClass);\n\n    function Increment(template, tagName, markup) {\n      this.variable = markup.trim();\n      Increment.__super__.constructor.apply(this, arguments);\n    }\n\n    Increment.prototype.render = function(context) {\n      var base, name, value;\n      value = (base = context.environments[0])[name = this.variable] != null ? base[name] : base[name] = 0;\n      context.environments[0][this.variable] = value + 1;\n      return String(value);\n    };\n\n    return Increment;\n\n  })(Liquid.Tag);\n\n}).call(this);\n\n//# sourceMappingURL=increment.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/unless.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Liquid, Unless,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  module.exports = Unless = (function(superClass) {\n    extend(Unless, superClass);\n\n    function Unless() {\n      return Unless.__super__.constructor.apply(this, arguments);\n    }\n\n    Unless.prototype.parse = function() {\n      return Unless.__super__.parse.apply(this, arguments).then((function(_this) {\n        return function() {\n          return _this.blocks[0].negate = true;\n        };\n      })(this));\n    };\n\n    return Unless;\n\n  })(Liquid.If);\n\n}).call(this);\n\n//# sourceMappingURL=unless.js.map\n","/home/travis/build/npmtest/node-npmtest-liquid-node/node_modules/liquid-node/lib/liquid/tags/include.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Include, Liquid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Liquid = require(\"../../liquid\");\n\n  module.exports = Include = (function(superClass) {\n    var Syntax, SyntaxHelp;\n\n    extend(Include, superClass);\n\n    Syntax = /([a-z0-9\\/\\\\_-]+)/i;\n\n    SyntaxHelp = \"Syntax Error in 'include' - Valid syntax: include [templateName]\";\n\n    function Include(template, tagName, markup, tokens) {\n      var match;\n      match = Syntax.exec(markup);\n      if (!match) {\n        throw new Liquid.SyntaxError(SyntaxHelp);\n      }\n      this.filepath = match[1];\n      this.subTemplate = template.engine.fileSystem.readTemplateFile(this.filepath).then(function(src) {\n        return template.engine.parse(src);\n      });\n      Include.__super__.constructor.apply(this, arguments);\n    }\n\n    Include.prototype.render = function(context) {\n      return this.subTemplate.then(function(i) {\n        return i.render(context);\n      });\n    };\n\n    return Include;\n\n  })(Liquid.Tag);\n\n}).call(this);\n\n//# sourceMappingURL=include.js.map\n"}